// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/taroxii/vote-api/pkg/entity"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// SignIn provides a mock function with given fields: ctx, usr
func (_m *UserUsecase) SignIn(ctx context.Context, usr string) (*string, *entity.User, error) {
	ret := _m.Called(ctx, usr)

	if len(ret) == 0 {
		panic("no return value specified for SignIn")
	}

	var r0 *string
	var r1 *entity.User
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*string, *entity.User, error)); ok {
		return rf(ctx, usr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = rf(ctx, usr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *entity.User); ok {
		r1 = rf(ctx, usr)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entity.User)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, usr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
